def order_points(pts):
	rect = np.zeros((4, 2), dtype = "float32")

	# the top-left point will have the smallest sum, whereas
	# the bottom-right point will have the largest sum
	s = pts.sum(axis = 1)
	rect[0] = pts[np.argmin(s)]
	rect[2] = pts[np.argmax(s)]
	diff = np.diff(pts, axis = 1)
	rect[1] = pts[np.argmin(diff)]
	rect[3] = pts[np.argmax(diff)]

	# return the ordered coordinates
	return rect

def four_point_transform(image, pts):
	# obtain a consistent order of the points and unpack them
	# individually
	rect = order_points(pts)
	(tl, tr, br, bl) = rect

	# compute the width of the new image, which will be the
	widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
	widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
	maxWidth = max(int(widthA), int(widthB))

	# compute the height of the new image, which will be the
	heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
	heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
	maxHeight = max(int(heightA), int(heightB))

	# now that we have the dimensions of the new image, construct
	# the set of destination points to obtain a "birds eye view",
	# (i.e. top-down view) of the image, again specifying points
	# in the top-left, top-right, bottom-right, and bottom-left
	# order
	dst = np.array([
		[0, 0],
		[maxWidth - 1, 0],
		[maxWidth - 1, maxHeight - 1],
		[0, maxHeight - 1]], dtype = "float32")

	# compute the perspective transform matrix and then apply it
	M = cv2.getPerspectiveTransform(rect, dst)
	warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

	# return the warped image
	return warped
    

def readResponse(pts,boxDim,img,threshold=0.5,bord=-1,white=(220,220,220),black=(0,0,0)):
    _, t = cv2.threshold(img,100,255,cv2.THRESH_BINARY)
    w,h=boxDim
    mask = 255*np.ones(boxDim, np.uint8)
    ret = {}
    for pt in pts:
        pt = tuple(map(int,pt))
        x,y=pt 
        crop=img[y:y+h,x:x+w]
        mean_color = cv2.mean(crop,mask)
        ret[pt]= mean_color[0]/255#
        clr = black if threshold > mean_color[0]/255 else white
        cv2.rectangle(img,pt,(x+w,y+h),clr,bord)#-1 is for fill
    return ret
def calcGaps(PointsX,PointsY,numsX,numsY):
    gapsX = ( abs(PointsX[0]-PointsX[1])/(numsX[0]-1),abs(PointsX[2]-PointsX[3]) )
    gapsY = ( abs(PointsY[0]-PointsY[1])/(numsY[0]-1),abs(PointsY[2]-PointsY[3]) )
    return (gapsX,gapsY)

def maketemplate(start,numsX,numsY,gapsX,gapsY):
    templateMCQ=[]
    posx=start[0]
    for x in range(numsX[1]):
        posy=start[1]
        for y in range(numsY[1]):
            templateMCQ.append((posx,posy))
            posy+= (gapsY[1] if ((y+1) % numsY[0]==0) else gapsY[0])
        posx+= (gapsX[1] if ((x+1) % numsX[0]==0) else gapsX[0])
    return templateMCQ

