# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[lint]

# Enable the isort rules.
extend-select = [
    # https://www.reddit.com/r/Python/comments/1kttfst/comment/mtwfzfi
    "A",   # detect shadowed builtins
    "BLE", # disallow catch-all exceptions
    "C4",  # Catch incorrect use of comprehensions, dict, list, etc
    "E",   # PyCodeStyle errors
    "F",   # Pyflakes rules
    "I",   # Sort imports properly
    "FA",  # Enforce from __future__ import annotations
    "ICN", # Use common import conventions
    "ISC", # Good use of string concatenation
    "NPY", # Some numpy-specific things
    "PTH", # Use pathlib instead of os.path
    "RET", # Good return practices
    "S",   # disallow things like "exec"; also restricts "assert" but I just NOQA it when I really need it
    "SIM", # Common simplification rules
    "TC",  # Enforce importing certain types in a TYPE_CHECKING block
    "TD",  # Be diligent with TODO comments
    "TID", # Some good import practices
    "UP",  # Warn if certain things can changed due to newer Python versions
    "W",   # PyCodeStyle warnings
]
# This ruff configuration replaces several pre-commit tools:
# - autoflake: F401 (unused imports) is enabled and auto-fixable
# - isort: Import sorting configured below with black profile
# - black: Formatter configured in [format] section
# - trailing-whitespace & end-of-file-fixer: W291, W292 enabled
# "I001" isort
select = ["ALL"]
ignore = [
    # Note: The commented rules were resolved manually in previous code. Kept here for reference.

    # Reference: https://www.flake8rules.com/
    # Code formatting and style rules
    "COM812", # Missing trailing comma in function call
    # "COM819", # Trailing comma prohibited

    # Documentation rules
    "D100", # Missing docstring in public module
    # "D203", # 1 blank line required before class docstring
    # "D213", # Multi-line docstring summary should start at the second line
    # "D300", # Use """triple double quotes"""

    # Indentation rules
    # "E111", # Indentation is not a multiple of four
    # "E114", # Indentation is not a multiple of four (comment)
    # "E117", # Over-indented

    # Import sorting rules
    # "ISC001", # Implicitly concatenated string literals on one line
    # "ISC002", # Implicitly concatenated string literals over multiple lines

    # Quote style rules
    # "Q000", # Remove bad quotes (double quotes preferred)
    # "Q001", # Remove bad quotes (single quotes preferred)
    # "Q002", # Remove bad quotes (avoid escaped quotes)
    # "Q003", # Remove bad quotes (avoid escaped quotes in f-strings)

    # Whitespace rules
    # "E203", # Whitespace before ':'
    # "E231", # Missing whitespace after ':'
    # "W191", # Indentation contains tabs
    # Note: W503 is not implemented by ruff - https://github.com/astral-sh/ruff/issues/4125
    # "W503", # Line break occurred before a binary operator

    # Other pycodestyle rules
    "E501", # Line too long
    # "E713", # Test for membership should be 'not in'
    # "E731", # Do not assign a lambda expression, use a def
    # "E741", # Do not use variables named 'I', 'O', or 'l'

    # Pyflakes rules
    # "F403", # 'from module import *' used; unable to detect undefined names
    # "F405", # Name may be undefined, or defined from star imports
    # "F541", # f-string without any placeholders

    # Ruff checks (ignored)
    "A005",    # Module shadows a Python standard-library module"
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation
    "ANN003",  # Missing type annotation
    "ANN201",  # Missing return type annotation for public function
    "ANN205",  # Missing return type annotation for staticmethod
    "BLE001",  # Do not catch blind exception
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in `__init__`
    "ERA001",  # Found commented-out code
    "FBT002",  # Boolean default positional argument in function definition
    "FIX002",  # Line contains TODO, consider resolving the issue
    "N999",    # Invalid module name
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
    "PLW1641", # Object does not implement `__hash__` method
    "PTH107",  # `os.remove()` should be replaced by `Path.unlink()`
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link for this TODO
    "TRY002",  # Create your own exception
    "UP038",   # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    "UP046",   # Generic class uses `Generic` subclass instead of type parameters

    # Ruff checks (resolved)
    # "ANN202", # Missing return type annotation for private function
    # "ANN204", # Missing return type annotation for special method
    # "ARG001",  # Unused function argument:
    # "ARG002",  # Unused method argument:
    # "ARG004",  # Unused static method argument
    # "C403",    # Unnecessary list comprehension (rewrite as a set comprehension)
    # "C416",    # Unnecessary dict comprehension (rewrite using `dict()`)
    # "C417",    # Unnecessary `map()` usage (rewrite using a list comprehension)
    # "C901",    # function is too complex
    # "D205",    # 1 blank line required between summary line and description
    # "D400",    # First line should end with a period
    # "D401",    # First line of docstring should be in imperative mood: "Returns a list of file paths that should be excluded from processing"
    # "D415",    # First line should end with a period, question mark, or exclamation point
    # "D417",    # Missing argument descriptions in the docstring
    # "E721",    # Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
    # "E722",    # Do not use bare `except`
    # "EM101",   # Exception must not use a string literal, assign to variable first
    # "EM102",   # Exception must not use an f-string literal, assign to variable first
    # "FBT001",  # Boolean-typed positional argument in function definition
    # "FBT003",  # Boolean positional value in function call
    # "ICN001",  # `matplotlib.pyplot` should be imported as `plt`
    # "INP001",  # File is part of an implicit namespace package. Add an `__init__.py`.
    # "N802",    # Function name `test_run_community_UmarFarootAPS` should be lowercase
    # "N803",    # Argument name should be lowercase
    # "N806",    # Variable in function should be lowercase
    # "PD901", # Avoid using the generic variable name
    # "PERF402", # Use `list` or `list.copy` to create a copy of a list
    # "PGH003",  # Use specific rule codes when ignoring type issues
    # "PLR0912", # Too many branches
    # "PLR0913", # Too many arguments in function definition (7 > 5)
    # "PLR0915", # Too many statements (67 > 50)
    # "PLR1714", # Consider merging multiple comparisons. Use a `set` if the elements are hashable.
    # "PLW2901", # `for` loop variable overwritten by assignment target
    # "PT017",   # Found assertion on exception `e` in `except` block, use `pytest.raises()` instead",
    # "PT018",   # Assertion should be broken down into multiple parts
    # "PTH103",  # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`"
    # "PTH110",  # `Path.exists()` should be replaced by `Path.exists()`
    # "PTH118", # `Path()` should be replaced by `Path` with `/` operator
    # "PTH122",  # `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    # "PTH207",  # Replace `glob` with `Path.glob` or `Path.rglob`"
    # "RET504", # Unnecessary assignment before `return` statement
    # "RUF005", # Consider iterable unpacking instead of concatenation
    # "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    # "S101",   # Use of `assert` detected
    # "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes"
    # "SIM102", # Use a single `if` statement instead of nested `if` statements"
    # "SIM118", # Use `key in dict` instead of `key in dict.keys()`
    # "T201",   # `print` found
    # "TC001",  # Move application import into a type-checking block
    # "TD004", # Missing colon in TODO
    # "TRY003", # Avoid specifying long messages outside the exception class
]

# Allow fix for all enabled rules (when `--fix`) is provided.

fixable = ["ALL"]
unfixable = [
    "D", # Don't fix docstyle from others
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore all directories named `tests`.
"src/tests/**/*.py" = ["INP001", "S101", "N802", "PT017"]
"src/processors/helpers/mapping.py" = ["S101"]

# Import sorting configuration (replaces isort)
# [lint.isort]
# known-first-party = []
# known-third-party = []
# section-order = [
#     "future",
#     "standard-library",
#     "third-party",
#     "first-party",
#     "local-folder",
# ]

[lint.pydocstyle]
convention = "google"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
